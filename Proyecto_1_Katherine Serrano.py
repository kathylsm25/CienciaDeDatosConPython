# -*- coding: utf-8 -*-
"""Proyecto 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rrCrrRvVthpHT0HbNl-n4wVzkVL8C-TV

# Proyecto No. 1

# Ejercicio 1
Escribir un programa que genere las ventas de los últimos 5 días, y muestre por pantalla una serie (Dataframe) con los datos de las ventas por producto (opcional): Nro de unidades y precio unitario, indexada por los días, antes y después de aplicarles un descuento del 5%.
"""

# Importamos las Librerías
import pandas as pd
import numpy as np

'''
Ingresamos los datos de NoDeUnidades, Precio Unitario  por día por día
Creamos una lista del precio unitario y la cantidad de productos vendidos durante los últimos cinco (5) días
Creamos un array con los datos de nuestras ventas de cada mes. Este array va a contener una lista por cada mes que tengamos de nuestra data
'''
dias = ["Dia 1","Dia 2","Dia 3","Dia 4","Dia 5"]
ventas=np.array([
                        [11,3999], #Dia1
                        [7,2300], #Dia2
                        [500,70], #Día3
                        [300,1450], #Dia4
                        [30,3250]  #Dia5
                        ])
ventas

'''
Convertirtimos nuestro array a DataFrame utilizando como index nuestra lista de dias y nombramos las columnas como Total de Productos y Precio Unitario
'''
df_ventas = pd.DataFrame(data=ventas, index=dias, columns=["Total de Productos","Precio Unitario"])
df_ventas

'''
Generamos el Total de las Ventas multiplicando el Total de Productos vendidos en el día por el Precio Unitario del Producto 
'''

df_ventas["Total de Ventas"]=df_ventas["Total de Productos"] * df_ventas["Precio Unitario"]
df_ventas

'''
Generamos el cálculo del Total de las Ventas con Descuento del 5% 
'''

df_ventas["Total de Ventas Con Descuento"] = (df_ventas["Total de Productos"] * df_ventas["Precio Unitario"]) * 0.95
df_ventas

"""# Ejercicio 2

Escribir un programa que reciba un diccionario con los ingresos mensuales de los clientes de una empresa, y devuelva una serie con el ingreso mínimo, máximo y media.

El resultado final debe ser una serie con los estadísticos.
"""

# Importamos Librería
import pandas as pd
import numpy as np

# Creamos nuestro Diccionario con los Ingresos Mensuales de los clientes
ingresos_cliente = {
    "Juan Perez": 1500,
    "Lorena Casado": 2750,
    "Jorge Gonzalez": 3890,
    "Raúl Moreno": 4928,
    "Flor Alicia Gutiérrez": 6789,
    "Miguel Zambrano": 1500,
    "Argenis Gonzalez": 2500
}
ingresos_cliente

# Creamos una serie a partir del Diccionario Ingresos
ingresos_serie = pd.Series(ingresos_cliente)
ingresos_serie

# Utilizamos la función describe() para obtener las estadísticas de nuestra serie
ingresos_serie.describe()

# Calculamos las estadísticas por separado
minimo = ingresos_serie.min()
maximo = ingresos_serie.max()
media = ingresos_serie.mean()
print ("El ingreso mínimo es:",minimo, "; el máximo es", maximo, "y la media es",round(media,2) )

# Creamos una serie con los estadísticos
estadisticos_serie=pd.Series(data=(minimo, maximo, media), index=("Minimo", "Máximo","Media"))
round(estadisticos_serie,2)

"""# Ejercicio 3
Escribir programa que genere y muestre por pantalla un DataFrame con los datos de la siguiente tabla:

A continuación, generar nuevas columna:
1. Columna 1 = Gasto/Ventas*100.
2. Columna 2 = Si Ventas>= 30000, imprimir “Meta Superada”,
caso contrario imprimir “Meta no Superada”.
3. Columna 3 = Si Gasto>Ventas, calcular el sobre gasto.
4. Obtener el total de las ventas de los últimos 3 meses
5. Obtener el total de gastos de febrero a abril
"""

# importamos las librerías
import numpy as np
import pandas as pd

'''
Datos de Ventas y Gastos de Enero a Mayo
Creamos una lista con los meses de nuestra muestra que nos servirá como indice
Creamos un array con los datos de nuestras ventas de cada mes. Este array va a contener una lista por cada mes que tengamos de nuestra data
'''
meses = ["Enero","Febrero","Marzo","Abril","Mayo"]
ventas_gastos=np.array([
                        [30500,22000], #Enero
                        [35600,23450], #Febrero
                        [28300,18100], #Marzo
                        [33900,35700], #Abril
                        [42500,32450]  #Mayo
                        ])
ventas_gastos

'''
Convertirtimos nuestro array a DataFrame utilizando como index nuestra lista de muestras y nombramos las columnas como Ventas y Gastos
'''
df_ventas_gastos = pd.DataFrame(data=ventas_gastos, index=meses, columns=["Ventas","Gastos"])
df_ventas_gastos

# Obtenemos información de nuestra Dataframe ya creado
df_ventas_gastos.info()

# Utilizamos la función describe() para obtener estadísticas descriptivas de nuestro Dataframe
df_ventas_gastos.describe()

"""Iniciamos el Desarrollo de nuestra primera prueba donde necesitamos obtener en una columna el siguiente resultado 
1. Columna 1 = Gasto/Ventas*100.
"""

# 1. Columna 1 = Gasto/Ventas*100.

df_ventas_gastos = (     # añadiendo variables con lambda
    df_ventas_gastos
    .assign(Col1 = lambda x: round((x.Gastos/x.Ventas) *100 , 2))
                  ) 
df_ventas_gastos

"""2. Columna 2 = Si Ventas>= 30000, imprimir “Meta Superada”, caso contrario imprimir “Meta no Superada”."""

# 2. Columna 2 = Si Ventas>= 30000, imprimir “Meta Superada”, caso contrario imprimir “Meta no Superada”.
df_ventas_gastos["Col2"] = df_ventas_gastos["Ventas"].apply(lambda x: 
                                                    "Meta Superada" if x>=30000 else (
                                                        "Meta no Superada" 
                                                        )
                                                    )


df_ventas_gastos

"""3. Columna 3 = Si Gasto>Ventas, calcular el sobre gasto."""

'''
3. Columna 3 = Si Gasto>Ventas, calcular el sobre gasto.
Utilizamos 
Axis = 1 operación aplicada a las columnas
'''

df_ventas_gastos["Col3"] = df_ventas_gastos.apply(lambda x: 
                                                    x['Gastos'] - x['Ventas'] if x['Gastos'] > x['Ventas'] else 0, axis=1
                                                )


df_ventas_gastos

"""4. Obtener el total de las ventas de los últimos 3 meses"""

'''
Para obtener el total de las Ventas de los últimos tres (3) meses utilizamos la función tail para seleccionar
los últimos meses y se lo aplicamos a la columna Ventas del Dataframe.
'''

total_ultimos_tres_meses = df_ventas_gastos['Ventas'].tail(3).sum()
print("El total de los últimos tres (3) meses es: ",total_ultimos_tres_meses)

"""5. Obtener el Total de Gastos de Febrero a Abril"""

'''
Declaramos una variable que nos va a almacenar el resultado
Para obtener desde Febrero a Abril colocamos por índice el 1 que corresponde a Febrero y nos posicionamos en Mayo 4 (4-1) para obtener Abril

'''

total_gastos_febrero_abril = df_ventas_gastos.iloc[1:4]['Gastos'].sum()
print("El Total de Gastos de Febrero a Abril es:",total_gastos_febrero_abril)

"""# Ejercicio 4
Con el siguiente fichero **datos_seguros.csv** contiene información de riesgo de clientes de un banco. Escribir un programa con los siguientes requisitos:
1. Generar un DataFrame con los datos del fichero.
2. Mostrar por pantalla las dimensiones del DataFrame, el número de datos que contiene, los nombres de sus columnas y filas, los tipos de datos de las columnas, mostrar las 10 primeras filas y las 10 últimas filas, verificar si tiene datos perdidos/nulos.
3. Extraer las 1000 primeras filas y almacenarlas en un contenedor.
"""

# Importamos Librería
import pandas as pd
#import numpy as np

# Cargamos la Data desde Nuestra PC
from google.colab import files
files.upload()

# Creamos nuestro Dataframe
df_seguros = pd.read_csv('datos_seguros.csv', sep=';') # sep=';'
df_seguros.head()

# Mostrar por pantallas las dimenciones del Dataframe
# Utilizamos la función info() que nos da los siguientes datos
# Cantidad de Registros = 45,798
# Total de Columnas = 17
# Nombres de sus columnas y filas
# Tipos de datos de las columnas
# Muestra la cantidad de registros no nulos por cada columna. La diferencia contra el total de registros nos indica los datos nulos. Para este caso las columnas
  # NUM_TC_TOTAL_T2, SALDO_BCO_T2, LINEA_BCO_T2, USO_LINEA_BCO_T2, Nro_CTa_Ahorro_Bco_T1, monto_ope_t2, PROM_ANUAL_MTO_OPERA, MAX_MTO_OPERA_Anual, Ratio_HospvsMtoTotal_t2, 
df_seguros.info()

# Mostramos las 10 primeras filas
df_seguros.head(10)

# Mostramos las 10 últimas filas
df_seguros.tail(10)

# total datos perdidos
pd.DataFrame(df_seguros.isna().sum(), 
             columns = ['Datos Perdidos'])

# Almacenamos las 1000 primeras filas en un DataFrame
df_1000_prim_filas = pd.DataFrame(data=df_seguros.head(1000))
df_1000_prim_filas